"""
Copyright (C) 2012 Alan J Lockett

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import numpy as np
from pyec.util.TernaryString import TernaryString

class Constraint(object):
   """
      A constraint region for optimization. The ``__call__`` method of the object should return whether an object satisfies the constrains, and the ``extent`` method should specify parameters for a hypercube completely containing the constraint region.
   """
   def __init__(self):
      pass
      
   def __call__(self, y):
      """
         Check whether a potential solution satisfies a constraint.
         
         :param y: The object to check.
         :type y: varied, and solution
         :returns: Whether the point is inside of the region.
      """
      return True
      
   def compatible(self,space):
      """Check whether this constraint is compatible with a given space.
      
      :param space: A :class:`Space` object representing a search domain.
      :type space: :class:`Space`
      
      """
      import pyec.space
      return isinstance(space, pyec.space.Space)
      
   def extent(self):
      """
         Return parameters for a hypercube containing the constraint region.
         
         If the return values are (center, scale), then the hypercube has a center at *center* and a side length of 2 times *scale*.
         
         :returns: The (center, scale) parameters for a hypercube.
      """
      return 0, 10.


class Hyperrectangle(Constraint):
   """
      A Hyperrectangle constraint region.
      
      :param center: The center point for the hyperrectangle.
      :type center: :class:`numpy.ndarray`
      :param scale: The distance to the sides for the hyperrectangle.
      :type scale: :class:`numpy.ndarray`
   """
   def __init__(self, center, scale):
      self.center = center
      self.scale = scale
      self.dim = shape(center)
      if shape(center) != shape(scale):
          raise ValueError("Shape of center and scale do not match")

   def __call__(self, y):
      return (np.abs(np.array(y) - self.center) <= self.scale).all()
   
   def compatible(self,space):
      """Check whether this constraint is compatible with a given space.
      Hyperrectangle works for any space with type ndarray.
      
      :param space: A :class:`Space` object representing a search domain.
      :type space: :class:`Space`
      
      """
      return space.type == ndarray
            
   def extent(self):
      return self.center, self.scale
      
   def random(self):
      base = np.random.random_sample(shape(self.center))
      return self.center + self.scale * base


class BinaryRectangle(Constraint):
   """A binary constraint generated by a :class:`TernaryString` whose
   ``known`` value specifies the constrained bits and whose ``base``
   contains the constraints at those bits.
   
   :param spec: A :class:`TernaryString` whose
                ``known`` value specifies the constrained bits and 
                whose ``base`` contains the constraints at those bits
   :type spec: :class:`TernaryString`
         
   """
   def __init__(self, spec):
       if not isinstance(spec, TernaryString):
           raise ValueError("BinaryRectangle expects a TernaryString")
           
       self.spec = spec
       self.dim = spec.length
       
   def __call__(self, x):
       """Test containment; x must "know" more than spec, and be equal at 
       the known bits.
       
       :param x: The point to test
       :type x: :class:TernaryString
       :returns: A ``bool``, ``True if ``x`` is in the space, ``False``
                 otherwise
       
       """
       return self.spec < x
       
   def compatible(self, space):
       """Check whether the space uses a subclass of ternary string
       
       :returns: ``bool``
       
       """
       return issubclass(space.type, TernaryString)
       
   def extent(self):
       raise NotImplementedError
       
   def random(self):
       """Return a random TernaryString conforming to the constraint.
       
       :returns: A :class:`TernaryString`
       
       """
       test = TernaryString.random(.5, self.spec.length)
       base = (~self.spec.known & test.base) 
       base |= (self.spec.known & self.spec.base)
       test.base = base
       return test 
       
